/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV 1
#define SYMBOLS 2
#define NUM 3
#define FUN 4

#define LAUNCHER (LG(SPACE))
#define CTRL_TAB (LC(TAB))
#define C_S_TAB (LC(LS(TAB)))
#define ELLIPSIS (LA(SEMICOLON))

#define SPC_PREVIOUS (LC(LA(LEFT)))
#define S_PRV SPC_PREVIOUS

#define SPC_NEXT (LC(LA(RIGHT)))
#define S_NXT SPC_NEXT

/ {

  chosen {
    zmk,battery = &vbatt;
  };

  vbatt: vbatt {
      compatible = "zmk,battery-nrf-vddh";
      label = "VBATT";
  };

  behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
      &kp Q   &kp Q      &kp W      &kp F        &kp P        &kp B                     &kp J      &kp L       &kp U       &kp Y      &kp SEMI   &kp Q
      &kp Q   &hm LGUI A &hm LALT R &hm LSHFT S  &hm LCTRL T  &hm RALT G                &hm RALT M &hm RCTRL N &hm RSHFT E &hm LALT I &hm RGUI O &kp Q
      &kp Q   &kp Z      &kp X      &kp C        &kp D        &kp V                     &kp K      &kp H       &kp COMMA   &kp DOT    &kp QMARK  &kp Q 
                                    &kp TAB      &kp BSPC     &kp DEL                   &kp ENTER  &kp SPACE   &kp Q
      >;
    };

    nav_layer {
      bindings = <
      &none   &none      &none      &none        &none        &none                     &none      &none       &none      &none      &none      &none
      &none   &none      &none      &none        &none        &none                     &none      &none       &none      &none      &none      &none
      &none   &none      &none      &none        &none        &none                     &none      &none       &none      &none      &none      &none 
                                    &trans       &trans       &trans                    &trans     &trans      $trans
      >;
    };

  };
};
