/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV 1
#define SYM 2
#define NUM 3
#define FN 4
#define TMUX 5

#define STAB (LS(TAB))
#define CTAB (LC(TAB))
#define CSTAB (LC(LS(TAB)))

&lt {
  quick-tap-ms = <125>;
};

/ {

  chosen {
    zmk,battery = &vbatt;
  };

  vbatt: vbatt {
      compatible = "zmk,battery-nrf-vddh";
      label = "VBATT";
  };

  conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
          if-layers = <1 2>;
          then-layer = <5>;
      };
  };

  combos {
      compatible = "zmk,combos";
      combo_esc {
         timeout-ms = <50>;
         key-positions = <27 32>;
         bindings = <&caps_word>;
      };
  };

  behaviors {
        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <24>;
        };
        swap2: swapper2 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_2";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp GRAVE>, <&kt LALT>;
        };
        lh: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <18 19 20 21 22>;
            hold-trigger-on-release;
        };
        rh: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <13 14 15 16 17>;
            hold-trigger-on-release;
        };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
      &none     &kp Q      &kp W      &kp F        &kp P        &kp B                     &kp J      &kp L       &kp U       &kp Y      &kp SEMI   &none
      &kp ESC   &lh LGUI A &lh LALT R &lh LSHFT S  &lh LCTRL T  &lh RALT G                &rh RALT M &rh RCTRL N &rh RSHFT E &rh LALT I &rh RGUI O &kp APOS
      &none     &kp Z      &kp X      &kp C        &kp D        &kp V                     &kp K      &kp H       &kp COMMA   &kp DOT    &kp FSLH   &none
                                      &lt NUM TAB  &lt NAV BSPC &lt FN DEL                &kp ENTER  &lt SYM SPACE &kp LC(B)
      >;
    };

    nav_layer {
      bindings = <
      &swap2    &trans     &trans     &trans       &trans       &trans                    &trans     &trans      &kp HOME    &kp END    &trans     &none
      &swap     &sk LGUI   &sk LALT   &sk LSHFT    &sk LCTRL    &sk RALT                  &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT  &trans     &kp F11
      &kp STAB  &kp LC(Z)  &kp LC(X)  &kp LC(C)    &kp LC(V)    &kp PSCRN                 &trans     &trans      &trans      &trans     &trans     &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans  
      >;
    };

   symbols_layer {
      bindings = <
      &none     &kp APOS   &kp LT     &kp GT       &kp DQT      &kp GRAVE                 &kp AMPS   &kp UNDER   &kp LBKT    &kp RBKT   &kp PRCNT  &none
      &kp TAB   &kp EXCL   &kp MINUS  &kp PLUS     &kp EQUAL    &kp HASH                  &kp PIPE   &kp COLON   &kp LPAR    &kp RPAR   &kp SEMI   &kp DQT
      &kp STAB  &kp CARET  &kp FSLH   &kp STAR     &kp BSLH     &kp AT                    &kp TILDE  &kp DLLR    &kp LBRC    &kp RBRC   &kp QMARK  &none
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };

    num_layer {
      bindings = <
      &none     &none      &none      &none        &none        &none                     &none      &kp N7      &kp N8      &kp N9     &none      &none
      &kp CTAB  &kp LGUI   &sk LALT   &sk LSHFT    &sk LCTRL    &sk RALT                  &none      &kp N4      &kp N5      &kp N6     &kp N0     &none
      &kp CSTAB &none      &none      &none        &none        &none                     &none      &kp N1      &kp N2      &kp N3     &none      &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };

    fn_layer {
      bindings = <
      &bootloader &none    &none      &none        &none        &none                     &none      &kp F7      &kp F8      &kp F9     &kp F12    &bootloader
      &sys_reset &kp LGUI  &sk LALT   &sk LSHFT    &sk LCTRL    &sk RALT                  &none      &kp F4      &kp F5      &kp F6     &kp F11    &sys_reset
      &none     &none      &none      &none        &none        &none                     &none      &kp F1      &kp F2      &kp F3     &kp F10    &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };
  
    tmux_layer {
      bindings = <
      &none     &kp LC(N1) &kp LC(N2) &kp LC(N3)   &kp LC(N4)   &kp LC(N5)                &kp LC(N6) &kp LC(N7)  &kp LC(N8)  &kp LC(N9) &kp LC(N0) &none
      &none     &kp LA(N1) &kp LA(N2) &kp LA(N3)   &kp LA(N4)   &kp LA(N5)                &kp LA(N6) &kp LA(N7)  &kp LA(N8)  &kp LA(N9) &kp LA(N0) &none
      &none     &none      &none      &none        &none        &none                     &none      &none       &none       &none      &none      &none 
                                      &trans       &trans       &trans                    &trans     &trans      &trans
      >;
    };
  };
};
